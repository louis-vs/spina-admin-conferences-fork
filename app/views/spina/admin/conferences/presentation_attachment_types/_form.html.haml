= render Spina::UserInterface::HeaderComponent.new do |header|
  - header.actions do
    - if @presentation_attachment_type.persisted?
      = render Spina::UserInterface::DropdownComponent.new do |dropdown|
        - dropdown.button(classes: "btn btn-default px-3") do
          = heroicon('dots-horizontal', style: :solid, class: "w-5 h-5 text-gray-600")

        - dropdown.menu do
          = button_to t('spina.permanently_delete'), admin_conferences_presentation_attachment_type_path(@presentation_attachment_type), method: :delete, class: "block w-full text-left px-4 py-2 text-sm leading-5 font-medium text-red-500 cursor-pointer bg-white hover:bg-red-100 hover:bg-opacity-50 hover:text-red-500 focus:outline-none focus:bg-gray-100 focus:text-gray-900", form: {data: { controller: 'confirm', confirm_message: t('.delete_confirmation', presentation_attachment_type: @presentation_attachment_type.name) } }

    = button_tag type: :submit, form: dom_id(@presentation_attachment_type), class: 'btn btn-primary', data: { controller: 'button', action: 'button#loading', loading_message: t('spina.ui.saving')} do
      = heroicon('check', style: :solid, class: 'w-5 h-5 mr-1 -ml-2')
      = t '.save'

.p-4.md:p-8
  = form_with model: [spina, :admin_conferences, @presentation_attachment_type], id: dom_id(@presentation_attachment_type), html: { autocomplete: 'off' } do |f|
    = render Spina::Forms::GroupComponent.new(label: Spina::Admin::Conferences::DietaryRequirement.human_attribute_name(:name)) do
      = render Spina::Forms::TextFieldComponent.new(f, :name)
